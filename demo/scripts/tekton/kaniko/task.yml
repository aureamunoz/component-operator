apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: s2i-kaniko-push
spec:
  inputs:
    params:
      - default: quay.io/snowdrop/spring-boot-maven-s2i
        description: S2i base image
        name: baseImage
      - default: .
        description: The location of the path to run s2i from
        name: contextPath
      - default: .
        description: The name of the directory containing the project (maven, ...)
          to be compiled
        name: moduleDirName
      - default: "false"
        description: Verify registry certificates
        name: verifyTLS
      - default: /workspace/git
        description: Git path where project is cloned
        name: workspacePath
      - name: DOCKERFILE
        description: Path to the Dockerfile to build.
        default: /sources/Dockerfile
      - name: CONTEXT
        description: The build context used by Kaniko.
        default: ./
    resources:
      - name: git
        outputImageDir: ""
        targetPath: ""
        type: git
  outputs:
    resources:
      - name: image
        outputImageDir: /builder/image-outputs/image
        targetPath: ""
        type: image
  steps:
    - name: generate
      args:
        - ${inputs.params.contextPath}
        - ${inputs.params.baseImage}
        - --as-dockerfile
        - /sources/Dockerfile
        - --image-scripts-url
        - image:///usr/local/s2i
        - --env
        - MAVEN_ARGS_APPEND=-pl ${inputs.params.moduleDirName}
        - --env
        - MAVEN_S2I_ARTIFACT_DIRS=${inputs.params.moduleDirName}/target
        - --env
        - S2I_SOURCE_DEPLOYMENTS_FILTER=*.jar
      image: quay.io/openshift-pipeline/s2i-buildah
      resources: {}
      volumeMounts:
        - mountPath: /sources
          name: generatedsources
      workingDir: ${inputs.params.workspacePath}
    - name: build-and-push
      env:
       - name: "DOCKER_CONFIG"
         value: "/builder/home/.docker/"
      command:
        - /kaniko/executor
        - --insecure
        - --dockerfile=${inputs.params.DOCKERFILE}
        - --context=/workspace/source/${inputs.params.CONTEXT} # The user does not need to care the workspace and the source.
        - --destination=${outputs.resources.image.url}
        - --verbosity=debug
      workingdir: /sources
      image: gcr.io/kaniko-project/executor
      securityContext:
        privileged: true
      volumeMounts:
      - mountPath: /sources
        name: generatedsources
  volumes:
    - emptyDir: {}
      name: generatedsources
    - emptyDir: {}
      name: libcontainers
