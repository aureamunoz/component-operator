// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 12, 21, 14, 56, 32, 787887750, time.UTC),
		},
		"/innerloop": &vfsgen۰DirInfo{
			name:    "innerloop",
			modTime: time.Date(2019, 1, 22, 19, 36, 18, 834650088, time.UTC),
		},
		"/innerloop/deployment": &vfsgen۰CompressedFileInfo{
			name:             "deployment",
			modTime:          time.Date(2019, 1, 22, 18, 11, 45, 160657195, time.UTC),
			uncompressedSize: 1642,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x41\x4f\xdc\x3c\x10\xbd\xef\xaf\xf0\x81\xe3\x97\x58\x70\x34\xfa\x0e\xd5\xd2\x9e\x58\xba\x12\x15\xf7\x89\x33\x2c\x06\xdb\xe3\xda\x93\xd0\x28\xca\x7f\xaf\x9c\x40\x48\x60\x81\xaa\x87\xfa\xe4\x99\xf1\x7b\x7e\xe3\x37\x4a\x20\x98\x1b\x8c\xc9\x90\x57\x02\x42\x48\xb2\x3d\xdd\x3c\x18\x5f\x2b\x71\x81\xc1\x52\xe7\xd0\xf3\xc6\x21\x43\x0d\x0c\x6a\x23\x84\x85\x0a\x6d\xca\x3b\x91\x01\x4a\xf4\x7d\x79\x05\x0e\x87\xa1\xef\x45\x04\x7f\x40\x71\xf2\x80\xdd\x7f\xe2\xa4\x05\xdb\xa0\x50\xff\x8b\xf2\x7b\x75\x8f\x9a\x77\xc8\x50\x5e\x8e\x70\x31\x0c\x23\x41\xdf\x8f\x87\xc5\x30\xa8\x71\x3f\x41\x46\x2a\xf4\xf5\x74\xca\x83\xc3\xc5\x2d\x9b\x14\x50\xe7\xeb\x23\x06\x6b\x34\x24\x25\x4e\x37\x42\x24\xb4\xa8\x99\xe2\x24\xcc\x01\xeb\xbb\xcb\x85\xd2\xd7\x5a\x37\x42\x30\xba\x60\x81\xf1\x09\xb1\x68\x31\x2f\xbb\x02\x1f\x81\xe7\xf5\x5a\x5a\xce\x3d\xcb\xcb\x4b\x93\x67\x30\x1e\xe3\x4c\x54\x08\x88\x87\x05\x6d\x21\x0a\xbd\x08\x64\x0b\x51\x5a\x53\xc9\xd4\x04\x8c\xad\x49\x14\x6b\xa9\xc9\xdf\x2e\x12\x65\x8e\x67\x8c\x26\xe7\xc0\xd7\xea\x33\x92\xca\xf8\x65\x3c\x1f\x47\xdf\xbe\x60\x67\x07\xcb\xeb\x80\xba\xfc\xea\xdb\xd9\xa9\x89\xfa\x58\xc3\xd3\x1a\x9d\x1b\x4b\x37\x79\xb7\xa8\xf5\x3d\xfa\x7a\x11\x1b\x07\x07\x54\xe2\x67\x03\x5d\x69\x48\x26\x4f\x8f\x75\xa4\x20\x53\x88\xc6\x1f\x8a\x8a\x88\x8b\x74\x66\x54\xf6\x26\xf1\x1a\xb6\x6f\xac\xdd\x93\x35\xba\x53\xe2\x8b\x7d\x84\x2e\xcd\xf5\xf7\xa4\x05\x8a\xbc\x7a\xf0\xd9\x94\x3d\x45\x1e\x11\x63\xb3\x39\x5a\x75\x14\x22\x31\x69\xb2\x4a\xfc\xd8\xee\xe7\x7c\x4b\xb6\x71\xb8\xa3\xc6\xaf\x59\x5d\xce\xec\x81\xef\xd4\xd1\xf7\x5f\xf0\x4e\x42\xd3\x1d\x44\xac\x8b\x3c\x72\xef\xb0\xb0\x0b\x12\x22\x9b\x5b\xd0\x9c\xde\xe0\x9f\x65\x5f\x33\x45\x38\xe0\xba\x6b\xe3\x0d\x6f\x8f\xcc\xde\xca\xec\x67\x37\xb7\xbb\x8b\xeb\xb7\x46\xc6\xc6\x17\xf7\xd0\x82\x92\x4d\x8a\xd2\x92\x06\x2b\xd3\x99\x91\xb1\xf1\xe7\xb9\xe6\xa9\xc6\xa7\x9a\xa9\xf0\x17\xea\xb9\xaa\xc9\x05\x63\xf1\x28\x1a\x52\x42\x57\x59\x3c\xaf\x1a\x63\x6b\x25\xeb\xf9\x1b\x93\xe4\x98\x82\x10\x3e\x1f\x94\x97\x67\xfd\xbb\x21\xd1\x14\xba\xe2\x98\x39\x8c\xd1\x19\x0f\x6c\xc8\xef\x30\xa5\xcc\x35\x79\x51\x63\x2b\x17\xc5\xc2\xd2\xe1\x23\xd0\xd3\xe5\xdf\x8c\xc5\x7f\x30\x38\x13\xf3\xd2\x66\x17\xb8\xbb\x30\x51\x89\x7e\xd8\x7c\x86\x2e\xfe\x64\xa0\x84\x08\xf9\x27\x91\x18\x3d\xdf\x8c\xd7\x6d\x2d\x18\xa7\x16\xea\x74\x4e\x5c\x7d\x40\xf5\x3b\x00\x00\xff\xff\xd4\x99\x6d\x44\x6a\x06\x00\x00"),
		},
		"/innerloop/deploymentconfig": &vfsgen۰CompressedFileInfo{
			name:             "deploymentconfig",
			modTime:          time.Date(2019, 1, 22, 18, 4, 45, 469034621, time.UTC),
			uncompressedSize: 2146,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\xcd\x6e\xdb\x38\x10\xbe\xfb\x29\x88\x20\xc7\x95\x84\xec\x91\xc1\x1e\x16\xce\x2e\x50\xa0\x4e\x8d\x38\xc8\x7d\x44\x8d\x65\x26\xfc\x03\x39\x52\x2b\x08\x7e\xf7\x82\x92\x23\x53\x8e\x9d\x34\x87\x96\x27\xce\x0c\xe7\xf7\xfb\x34\x02\x27\x9f\xd0\x07\x69\x0d\x67\xe0\x5c\xc8\xad\x43\x13\x76\x72\x4b\xb9\xb4\x45\x7b\xb3\x78\x91\xa6\xe2\xec\x0e\x9d\xb2\x9d\x46\x43\x4b\x6b\xb6\xb2\x5e\x68\x24\xa8\x80\x80\x2f\x18\x53\x50\xa2\x0a\xf1\xc6\x62\x0c\xce\xfa\x3e\xbf\x07\x8d\xfb\x7d\xdf\x33\x0f\xa6\x46\x76\xfd\x82\xdd\x5f\xec\xba\x05\xd5\x20\xe3\xff\xb0\xfc\x5b\xf9\x8c\x82\x56\x48\x90\x7f\x1d\xdc\xd9\x7e\x3f\x04\xe8\xfb\xe1\x31\xdb\xef\xf9\x70\x1f\x5d\x86\x50\x68\xaa\xf1\x95\x01\x8d\x49\x96\x45\x70\x28\x62\x7a\x8f\x4e\x49\x01\x81\xb3\x9b\x05\x63\x01\x15\x0a\xb2\xfe\x5c\x61\x83\xaa\x9a\x9a\x12\x43\x53\x73\x7b\x20\x0f\x84\x75\x37\xba\x53\xe7\x90\xb3\x07\xab\x94\x34\xf5\x82\x31\x42\xed\x14\x10\x8e\xd6\x74\x1a\xf1\xa4\x13\xb9\x90\xfc\xe3\x02\xe2\x39\xed\x34\xea\x5e\xbb\x8d\x47\x58\x43\x20\x0d\xfa\x29\x59\xc6\xc0\xd7\x49\xea\x8c\x65\x22\x11\x8a\x16\x7c\xa1\x64\x59\x84\xc6\xa1\x6f\x65\xb0\xbe\x2a\x62\xf6\x44\x91\x47\x79\xf2\x11\x56\x6b\x30\x15\xff\x28\x48\x29\x4d\x2a\x4f\xcf\xd1\xb4\x47\xdf\x89\x10\xf9\xc6\xa1\xc8\xff\x33\xed\x04\xfc\x18\xfa\x5c\xc3\xe3\x19\x88\x30\x98\x9e\xe2\x2d\xb1\xf5\x3d\x9a\x2a\x91\xa5\x86\x7a\x7c\x39\x24\x79\x68\x0c\x49\x8d\x63\x40\x1e\x41\x0b\x34\x7f\xbb\x6e\x94\x5a\x5b\x25\x45\xc7\xd9\xbf\xea\x3b\x74\x61\xb2\x5f\xaa\xc7\x59\x4f\xb3\x29\x4f\x48\xac\xad\xa7\x63\xf2\x28\xcd\xda\x70\xde\x92\x15\x56\x71\xf6\xb8\x5c\x4f\xfa\xd6\xaa\x46\xe3\xca\x36\x66\x1e\x55\x47\xcd\x1a\x68\xc7\xcf\x0e\x3d\x89\x3b\x16\x1a\x76\xe0\xb1\xca\x22\x17\x2f\x44\x21\xed\x0a\xf0\x24\xb7\x20\x28\xbc\xf1\x7f\x2d\x7b\x43\xd6\x43\x8d\xf3\xae\xa5\x91\xf1\xf3\x7f\x43\xb8\x19\xc2\xaf\x10\x2e\x57\x77\x9b\xb7\xe8\xf9\xc6\x64\xcf\xd0\x02\x2f\x9a\xe0\x0b\x65\x05\xa8\x22\xfc\x2d\x0b\xdf\x98\xdb\x68\x33\xb6\xc2\x83\x4d\x96\xf8\x03\xc5\x64\x15\x56\x3b\xa9\xf0\xac\x37\x84\x80\xba\x54\x78\x5b\x36\x52\x55\xbc\x38\x7e\x57\xa1\x18\x54\xe0\xdc\x29\x3b\xae\xa6\x56\x8f\xe3\x9c\x51\xe4\xea\x93\x1c\x11\xd6\x75\xd9\x39\x6c\x3c\x06\xdb\x78\x81\x81\xb3\xfe\xc8\x04\x42\xaf\xa5\x01\x92\xd6\xac\x30\x84\x98\x61\x04\xa8\xc2\xb6\x48\x8c\x99\xb2\xf5\x7b\x4e\x87\x92\xfe\x97\x0a\xff\x00\x9b\xc6\xc8\x29\xf6\xda\x51\x77\x27\xfd\xac\xb7\x4b\xde\xd9\xaf\xb0\x8c\x31\x17\x7f\x48\x81\xd0\xd0\xd3\x90\x6e\xa9\x40\x6a\x9e\x54\x27\xa2\xe2\xfe\xfd\x50\xe4\x65\x5d\x1f\x68\x9a\x1d\xd6\xf7\x97\x08\xe4\x72\x17\x17\xd0\x62\x02\x76\x94\xd7\xe0\x41\x4f\x7d\x41\x43\x56\x03\x49\xc1\x19\xf9\x06\x4f\x97\x6d\x4c\x92\xcc\xe0\x02\xf2\x5b\x6f\x93\xaa\xc7\xff\xe8\x50\xc1\x86\x3c\x82\x7e\x84\xfa\x03\x06\x1d\x77\xd5\x6f\x6e\xe0\x74\xbd\x7d\xba\xf2\xf7\x56\xed\xcf\x00\x00\x00\xff\xff\x65\x17\x14\x0c\x62\x08\x00\x00"),
		},
		"/innerloop/imagestream": &vfsgen۰CompressedFileInfo{
			name:             "imagestream",
			modTime:          time.Date(2019, 1, 22, 19, 36, 18, 833418452, time.UTC),
			uncompressedSize: 756,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x8a\xdc\x30\x10\xbc\xeb\x2b\x9a\x65\x8e\x19\x9b\xcd\x51\x43\x0e\x4b\x72\x09\x6c\x1e\x64\x20\xf7\xb6\xd4\x9e\x68\x47\x2f\x24\x79\xc8\x20\xf4\xef\xc1\xb2\xac\xdd\xc0\x9e\x2c\xaa\xab\xba\xab\xca\x39\x1f\x2c\x1a\x7a\xf2\x1e\xf8\x27\x18\xbe\xa3\x21\x28\x85\xe5\x7c\xd0\x38\x91\x8e\x15\xfd\x31\xbd\x90\x48\xdf\x28\xe1\xf0\xbc\xa1\xa5\xa0\x57\xbf\x29\x44\xe5\x2c\x87\xdb\x23\xbb\x2a\x2b\x39\x3c\xab\x98\x98\x4a\x64\x22\x67\x39\x43\x40\x7b\x21\x18\xce\x9e\xc4\xf0\xd5\xe0\x85\x56\x21\x3b\xc2\x5b\xad\x5a\xf1\xc1\x79\xb2\xf1\x8f\x9a\xd3\xa0\xdc\x78\x7b\x64\x00\xdb\xc2\xaa\x3a\xa7\x40\x68\x18\x80\xa1\x84\x12\x13\x72\x06\x00\xb0\x19\xdc\xde\x00\xe8\x3d\x87\xd7\x34\xa5\xf4\xfb\x87\x2b\xdd\x3f\xc0\xe1\x86\x7a\xa1\x35\xce\x9e\xac\x94\x26\xcd\xb9\x72\xa0\x14\x5e\xdf\x1b\xb3\x6e\x20\x2b\x77\xde\xba\x78\x9d\xd7\x8e\x2a\x16\x3d\x89\x66\xc5\xb9\xeb\xe2\x7f\x3a\xad\xc4\x7d\x37\xa4\x9d\x40\xcd\x61\x46\x1d\x89\x6d\x67\xd4\x0c\xc3\x17\x27\xae\x14\x6a\xae\xb6\x38\xe1\xa5\xa5\x38\x36\xce\x93\xb5\x2e\x61\x52\xce\x7e\x36\x32\x76\x9f\xd8\xe1\x9e\x1a\x40\x18\x19\x39\x3c\x84\xc5\x1e\x5f\xf0\x86\x7c\x5c\x62\x18\xeb\xed\x31\x7e\x54\x63\x58\xec\x69\x9d\x59\x27\xa9\xcd\xd4\x44\x7f\x49\xac\xd3\x93\x70\xc6\x2b\x4d\xef\x2a\x31\x46\x32\x93\xa6\xd3\xb4\x28\x2d\xf9\x28\xc9\x6b\x77\x37\x64\x53\x1c\x2b\x84\xde\x3f\xf4\x06\xc9\xca\xee\x73\x0e\xce\xbc\x1a\xdc\x7e\xe4\x9b\xd8\x7d\xd2\x1b\xfd\x45\xde\x75\xb5\x32\xde\x85\xd4\xba\x84\xbc\xc3\x1b\x59\x63\xa2\x98\x1a\x14\x68\xa6\x40\x56\xd0\xff\xc5\x03\xa4\xbb\x27\x0e\x67\xb7\x04\xb1\x57\x5f\xfd\xb5\xcf\xbf\x00\x00\x00\xff\xff\xd3\xe2\x4c\x92\xf4\x02\x00\x00"),
		},
		"/innerloop/ingress": &vfsgen۰CompressedFileInfo{
			name:             "ingress",
			modTime:          time.Date(2019, 1, 22, 18, 8, 49, 841472170, time.UTC),
			uncompressedSize: 347,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xcd\x4e\xc3\x30\x10\x84\xef\x79\x8a\x39\xf4\x48\x53\xf5\x6a\x89\x07\x40\x82\x82\x84\xc4\x7d\xe3\x8c\xda\x90\xc4\xb1\xec\x6d\x04\xb2\xfc\xee\xc8\x0e\x20\x7e\x6e\xfb\x79\x67\x67\xc6\xe2\x87\x17\x86\x38\x2c\xce\x80\x6f\x4a\x57\xc6\x78\x58\x8f\x1d\x55\x8e\xcd\x38\xb8\xde\xe0\xce\x9d\x03\x63\x6c\x66\xaa\xf4\xa2\x62\x1a\xc0\xc9\x4c\x83\x94\xda\x93\xcc\xcc\xb9\x01\x26\xe9\x38\xc5\xb2\x03\xc4\xfb\x1f\xcb\x94\x10\xc4\x9d\x89\xdd\xc8\xf7\x1b\xec\x56\x99\xae\x84\xb9\x45\xfb\xd8\xbd\xd2\xea\x03\x55\xda\xfb\x7a\x8e\x6a\x05\xa4\x54\xc5\xc8\xd9\xd4\x79\x3b\xa9\x56\x74\x7d\x51\x45\x4f\x5b\xc2\xc2\x75\x62\x4d\xdd\xe3\xb2\x44\xfd\xdd\x09\xb8\xa8\xfa\xad\x13\xe0\x45\x2f\xf1\x0b\xf6\x15\x0d\x0e\x9f\x0c\x74\x62\x47\xba\xde\x7c\x3f\x00\x91\x61\x1d\x2c\x4f\xff\x3e\xfb\x47\xf0\xb4\x84\x2d\xf9\xd9\xd3\xb6\x85\x72\xfe\x08\x00\x00\xff\xff\x62\x6c\xa9\xf9\x5b\x01\x00\x00"),
		},
		"/innerloop/pvc": &vfsgen۰CompressedFileInfo{
			name:             "pvc",
			modTime:          time.Date(2019, 1, 22, 18, 8, 49, 837678910, time.UTC),
			uncompressedSize: 339,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x3d\x6b\x33\x31\x10\x84\xfb\xfb\x15\x53\xb8\x7c\xdf\x83\xb4\x82\x54\x6e\xe3\x24\x60\x70\xbf\xd6\x0d\x46\xb1\xbe\x22\xe9\x0c\x46\xe8\xbf\x07\xc9\x26\x31\xb8\x93\x76\x9f\x19\x9e\x95\x68\x0e\x4c\xd9\x04\xaf\x70\x79\x99\xce\xc6\x2f\x0a\x9f\x7d\x92\x0b\x7d\x39\x04\xbb\x3a\x6e\xad\x18\x37\x39\x16\x59\xa4\x88\x9a\x00\x2f\x8e\x0a\xb5\xce\xfb\x48\x3d\xef\x4b\x48\x72\xe2\xfc\x2e\x8e\xad\x4d\x80\x95\x23\x6d\xee\x20\x20\x31\x0e\xf2\x77\xf9\x90\x7e\x98\xd5\x8a\x24\xfe\x44\x6c\xce\xbc\xfe\xc3\xe6\x22\x76\x25\xd4\x2b\xe6\x8f\xe3\x17\x75\xd9\xb1\xc8\xfc\x36\x7a\xf1\x17\xe9\x30\x5a\x53\xe3\x7d\x8b\xb4\x56\x2b\xe8\x97\x4e\xe5\x48\xdd\x2d\x44\x6b\xe6\xbc\x0b\x0b\x87\xd4\xff\x27\xf3\xbe\x1a\xad\x89\x39\xac\x49\xf3\x2e\x9f\xf8\xbd\x32\x97\xfb\x0f\xc8\x37\xfe\xf9\xf4\xad\x44\xd1\xa6\x5c\x5b\x9b\x7e\x02\x00\x00\xff\xff\x94\x0f\x3d\x3d\x53\x01\x00\x00"),
		},
		"/innerloop/route": &vfsgen۰CompressedFileInfo{
			name:             "route",
			modTime:          time.Date(2019, 1, 22, 18, 8, 49, 833044163, time.UTC),
			uncompressedSize: 261,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcd\x6a\xc4\x20\x18\x45\xf7\x3e\xc5\x5d\x64\x59\x2c\xdd\x0a\x7d\x83\xfe\x40\x0b\xdd\x7f\x49\x6e\x5b\x27\x89\x8a\x9a\xc0\x20\xbe\xfb\x60\xb2\x18\x06\xb2\x13\xce\x3d\x72\x3e\x09\xf6\x87\x31\x59\xef\x0c\xa2\x5f\x33\xb5\x0f\x74\xe9\xdf\xfe\x66\x6d\xfd\xf3\xf6\xa2\x26\xeb\x46\x83\xaf\xc6\xd4\xc2\x2c\xa3\x64\x31\x0a\x70\xb2\xd0\xa0\x14\xfd\x21\x0b\x6b\x55\xc0\x2c\x3d\xe7\xd4\x18\x20\x21\x3c\xc2\x33\x01\x28\x05\x51\xdc\x1f\xd1\x4d\xbc\x3e\xa1\xdb\x64\x5e\x09\xf3\x0a\xfd\xd9\x5f\x38\xe4\x77\x66\xd1\x6f\xfb\xbf\xb8\x2b\x6d\x8c\x5a\xcd\xfe\x3e\x94\x5a\x4b\x01\xdd\xd8\x56\x29\x70\x68\x15\xd9\x1f\x2d\xc7\x05\xdf\x8c\x9b\x1d\x78\x96\x72\x0b\x00\x00\xff\xff\x3f\x79\xef\x1f\x05\x01\x00\x00"),
		},
		"/innerloop/service": &vfsgen۰CompressedFileInfo{
			name:             "service",
			modTime:          time.Date(2019, 1, 22, 18, 8, 49, 839553123, time.UTC),
			uncompressedSize: 314,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbd\x6a\xc4\x30\x10\x84\x7b\x3f\xc5\x14\x57\x26\x86\xb4\x82\x54\x69\xf3\x63\xb8\x90\x7e\x4f\x1e\x0e\xc7\xb2\x24\xd6\x1b\x43\x10\x7a\xf7\x60\x25\x10\x0e\xdc\x0d\x9a\xf9\x46\xb3\x92\xa7\x0f\xea\x3a\xa5\xe8\xb0\x3d\x74\xf3\x14\x47\x87\x33\x75\x9b\x3c\xbb\x85\x26\xa3\x98\xb8\x0e\x88\xb2\xd0\xa1\x94\xfe\x55\x16\xd6\xda\x01\x41\x2e\x0c\xeb\xee\x01\x92\xf3\xad\x79\x04\x00\xa5\x40\x25\x5e\x89\xd3\xcc\xef\x3b\x9c\x36\x09\x5f\x84\x7b\x44\xff\x76\xf9\xa4\xb7\x17\x9a\xf4\xcf\xad\x17\xff\xc8\x1e\x46\xad\xae\xe9\x5f\xa4\xd6\x52\xc0\x38\xee\xa9\x35\xd3\xef\x2b\x72\x52\x6b\x73\xee\x9b\x6c\x7f\x9f\x33\x7d\x3f\x24\xb5\xbf\xb6\xac\xc9\x92\x4f\xc1\xe1\xfd\x69\x68\x2f\x26\x7a\xa5\x0d\xc7\xc0\xca\x40\x6f\x49\x8f\x8e\xfc\x09\x00\x00\xff\xff\xe7\xe7\x7e\xf8\x3a\x01\x00\x00"),
		},
		"/servicecatalog": &vfsgen۰DirInfo{
			name:    "servicecatalog",
			modTime: time.Date(2018, 12, 21, 14, 56, 32, 788143503, time.UTC),
		},
		"/servicecatalog/servicebinding": &vfsgen۰CompressedFileInfo{
			name:             "servicebinding",
			modTime:          time.Date(2018, 12, 21, 14, 56, 32, 788042232, time.UTC),
			uncompressedSize: 273,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x43\x67\x15\xd9\x0a\x01\x1d\xda\x03\x64\xa8\x81\xee\x8c\xfc\x6b\x10\xb1\x69\xc1\x14\xb2\x08\xbc\x7b\x21\xb7\xa9\x9b\x51\xff\xe9\xf1\x93\xad\x3d\x29\x2f\x78\x2b\x85\xd2\x2b\xc5\x33\x2f\x20\xf7\xd0\x1a\x6d\xac\x13\x28\x0e\x05\x39\x0e\xd8\x6e\x92\x61\xe4\xce\x45\x3e\xb1\x99\xac\x9a\xc8\x7e\xe2\xcc\x95\xe7\x75\x8a\xd7\x17\x8b\xb2\x3e\xdf\x4e\x17\x54\x3e\x85\xab\xe8\x98\xe8\x57\x7d\x17\x1d\x45\xa7\xb0\xa0\xf2\xc8\x95\x53\x20\xea\xc5\x89\x5a\xdb\x5b\xdd\x03\xd1\xcc\x17\xcc\xd6\x19\x11\x97\xd2\xe1\x7d\xbd\x9d\x1f\xce\xbf\xd8\x0a\x72\x57\x44\xad\xb2\x66\x7c\xe0\x2b\x3d\xfc\x3d\xe6\x1b\xf2\x86\x7a\xbe\xe7\xc3\xdf\x73\x3f\x19\x3a\xba\x7f\x07\x00\x00\xff\xff\x85\x6f\x46\xd9\x11\x01\x00\x00"),
		},
		"/servicecatalog/serviceinstance": &vfsgen۰CompressedFileInfo{
			name:             "serviceinstance",
			modTime:          time.Date(2018, 12, 21, 14, 56, 32, 788194278, time.UTC),
			uncompressedSize: 333,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xbd\x6a\x04\x21\x14\x85\x7b\x9f\xe2\x16\xa9\x0d\xdb\x05\x21\x45\x08\x29\x92\x62\x09\x0c\xa4\x3f\xeb\x5c\x16\x59\xe7\x8e\x78\xcd\x12\x10\xdf\x3d\xe8\xee\xe4\x87\x2d\xfd\xce\x39\x7e\x62\xad\x77\x82\x85\x9f\x52\x22\xf7\x48\x76\x8f\x85\xa9\x35\x53\x2b\x65\xc8\x91\xc9\x4e\x89\xbd\x9d\x38\x9f\x83\x67\xa5\xd6\x90\xc2\x07\x67\x0d\xab\x38\xd2\x0b\xf6\x28\x88\xeb\xd1\x9e\x1e\xd4\x86\xf5\xfe\xbc\x3b\x70\xc1\xce\x9c\x82\xcc\x8e\xae\xd3\x57\xd1\x02\xf1\x6c\x16\x2e\x98\x51\xe0\x0c\x51\x37\x3b\xaa\x75\x68\x5b\x33\x44\x11\x07\x8e\xda\x33\x22\xa4\xd4\xc3\xed\x7d\x23\xff\xdd\xfc\xc1\x9a\xd8\xf7\x89\x8f\x9f\x5a\x38\x5f\x8d\xcf\x11\xaa\x2f\x5f\x85\xb3\x20\xee\x37\xd3\xa0\xe3\xaa\xff\xed\xf7\x08\xb9\x29\x77\x38\xba\x09\x19\x0b\x17\xce\x7a\xe1\x3f\xc7\xb7\x69\x95\xf1\x5d\x2c\x73\x6b\xdf\x01\x00\x00\xff\xff\xdd\xed\x80\x29\x4d\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/innerloop"].(os.FileInfo),
		fs["/servicecatalog"].(os.FileInfo),
	}
	fs["/innerloop"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/innerloop/deployment"].(os.FileInfo),
		fs["/innerloop/deploymentconfig"].(os.FileInfo),
		fs["/innerloop/imagestream"].(os.FileInfo),
		fs["/innerloop/ingress"].(os.FileInfo),
		fs["/innerloop/pvc"].(os.FileInfo),
		fs["/innerloop/route"].(os.FileInfo),
		fs["/innerloop/service"].(os.FileInfo),
	}
	fs["/servicecatalog"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/servicecatalog/servicebinding"].(os.FileInfo),
		fs["/servicecatalog/serviceinstance"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
