// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 10, 11, 9, 22, 1, 958566131, time.UTC),
		},
		"/innerloop": &vfsgen۰DirInfo{
			name:    "innerloop",
			modTime: time.Date(2018, 11, 21, 14, 8, 50, 886610987, time.UTC),
		},
		"/innerloop/deploymentconfig": &vfsgen۰CompressedFileInfo{
			name:             "deploymentconfig",
			modTime:          time.Date(2018, 11, 21, 14, 8, 50, 886091245, time.UTC),
			uncompressedSize: 2007,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x4d\x6f\xe3\x38\x0c\xbd\xfb\x57\x08\xbd\x3b\x46\x7b\x54\x4f\x8b\x74\x17\xd8\x43\x8b\xa0\x29\x7a\x67\x64\xc6\xe1\x8c\xbe\x20\xd1\x9e\x31\x8c\xfe\xf7\x81\xe2\xd4\x91\xd3\x78\x8a\x1e\x66\x74\x0a\x49\x3d\xf2\x51\x8f\xa1\xc1\xd3\x2b\x86\x48\xce\x4a\x01\xde\xc7\x95\xf3\x68\xe3\x81\xf6\xbc\x22\x57\x75\xb7\xc5\x77\xb2\xb5\x14\x0f\xe8\xb5\xeb\x0d\x5a\x5e\x3b\xbb\xa7\xa6\x30\xc8\x50\x03\x83\x2c\x84\xd0\xb0\x43\x1d\xd3\x2f\x91\x72\x48\x31\x0c\xab\x27\x30\xf8\xf6\x56\x08\x61\xc1\x60\xee\x89\x1e\x55\xba\x1a\xd0\x6b\x52\x10\xa5\xb8\x2d\x84\x88\xa8\x51\xb1\x0b\x0b\x49\x84\xa8\x27\x02\xea\x48\x60\x1e\x8f\x1c\x80\xb1\xe9\x47\x38\xf7\x1e\xa5\x78\x76\x5a\x93\x6d\x0a\x21\x18\x8d\xd7\xc0\x38\x46\x73\xe6\xe9\xe4\xec\x17\x8a\x7f\x4e\x20\x9d\xcb\x4e\x93\xef\xbd\xdb\x74\x94\xb3\x0c\x64\x31\x4c\xc5\x4a\x01\xa1\xc9\x4a\x97\xa2\x54\x99\x51\x75\x10\x2a\x4d\xbb\x2a\xb6\x1e\x43\x47\xd1\x85\xba\x4a\xd5\x33\xc7\x2a\xd9\x13\x46\x39\x63\xc0\xd6\xf2\xb3\x24\x3b\xb2\xb9\x3d\x5d\x47\xdb\x9d\xb1\xc3\x20\x02\xd8\x06\xc5\x6a\xeb\x51\xad\xfe\xb5\x5d\x14\xd9\x83\x94\x57\x1b\x1e\x4f\x07\xba\x1d\x43\xaf\xe9\x57\x16\x1b\x06\xb4\x75\x66\x93\x81\x66\xbc\xf9\xdc\x5a\x26\x83\x63\x2e\x99\xf4\x8a\x3c\xbf\xb6\x69\xb5\xde\x38\x4d\xaa\x97\xe2\x1f\xfd\x03\xfa\x38\xc5\x97\xa8\x78\x17\x78\xf6\xc0\x93\x08\x1b\x17\xf8\x88\x38\x36\x97\xac\x59\x07\x3e\x38\x76\xca\x69\x29\x5e\xd6\x9b\xc9\xdf\x39\xdd\x1a\x7c\x74\xad\x9d\x67\x35\xc9\xb3\x01\x3e\xc8\xab\xef\x9d\xe5\x1d\x89\xc6\x03\x04\xac\xcb\x34\x86\x0b\x59\xd8\xf8\x0a\x02\xd3\x1e\x14\xc7\x0f\x78\x73\x97\x63\xc9\x52\xfa\x5b\x7e\x18\xae\x99\x9a\xef\x72\xad\x1f\x1f\xb6\x1f\x95\x0a\xad\x2d\xbf\x41\x07\xb2\x6a\x63\xa8\xb4\x53\xa0\xab\x78\x47\x55\x68\xed\x7d\x8a\x59\x57\xe3\x29\x46\x3b\xfc\x89\x6a\x8a\x2a\x67\x3c\x69\xbc\x8a\x86\x18\xd1\xec\x34\xde\xef\x5a\xd2\xb5\xac\xce\xff\xa1\x58\x1d\x5d\xe0\xfd\xe5\x24\xdc\xbc\x4b\xb2\x3d\xbf\xdf\x6c\x26\x6e\xbe\x38\x14\xca\xf9\xbe\xbc\x26\x46\xc0\xe8\xda\xa0\x30\x4a\x31\x9c\xa5\x67\x0c\x86\x2c\x30\x39\xfb\x88\x31\xa6\x0a\xa3\x22\x35\x76\x55\x16\x2c\xb5\x6b\x7e\x07\x3a\x51\xfa\x8f\x34\xfe\x85\xf1\x19\x33\xe7\xda\x1b\xcf\xfd\x03\x85\x59\x6f\x4b\xe8\xf2\xea\x58\x09\xe1\xd3\x97\x21\x32\x5a\x7e\x3d\xe6\x5f\x6b\x20\x23\x33\x3a\x2a\x39\x9e\x2e\xb0\x1c\xa8\x69\x4e\x83\x58\x9e\x96\xf1\xff\x49\xaa\xf5\x21\xad\x93\x62\x92\x6e\xb4\x37\x10\xc0\x4c\xcc\xa1\x65\x67\x80\x49\x49\xc1\xa1\xc5\xcb\xd5\x99\x6a\x65\x5d\x2e\x68\xbb\x0f\x2e\xa3\x39\x7e\xc1\x8e\x0c\xb6\x1c\x10\xcc\x0b\x34\x9f\xcc\xc8\x79\xfd\xfc\xe1\x06\x2e\x37\xd6\x97\x99\x2f\x2c\xce\x5f\x01\x00\x00\xff\xff\xa8\xf6\x0b\x4c\xd7\x07\x00\x00"),
		},
		"/innerloop/imagestream": &vfsgen۰CompressedFileInfo{
			name:             "imagestream",
			modTime:          time.Date(2018, 11, 20, 19, 22, 4, 196654178, time.UTC),
			uncompressedSize: 646,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x8b\xdb\x30\x10\x85\xef\xfe\x15\xc3\xd2\x6b\x6c\xb6\x47\x85\x1e\x96\xf6\x52\x28\xa5\x34\xd0\xfb\x44\x1e\xa7\x6a\x24\xcd\xa0\x91\x43\x83\xf0\x7f\x2f\x96\x15\xef\x16\xf6\x64\xfb\x7b\xf3\x66\x9e\x5f\x29\x1f\x22\x06\x7a\x11\x01\xf3\x09\xfa\xef\x18\x08\x96\x05\xc5\xfd\xa2\xa4\x8e\xa3\x81\xdb\x73\x77\x75\x71\x34\xf0\xcd\x69\xee\x5c\xa6\xa0\xa6\x2b\x05\x12\xc6\x0b\x41\x7f\x12\xb2\xfd\xd7\x80\x17\x52\x58\x96\xee\x00\x6f\xbd\x6e\xe5\x3d\x0b\x45\xfd\xed\xa6\xdc\x3b\x1e\x6e\xcf\x1d\xc0\xb6\xb0\xba\x4e\x39\x11\x86\x0e\x20\x50\xc6\x11\x33\x9a\x0e\x00\xc0\xe3\x99\xbc\x6e\xef\x00\x28\x62\xe0\x35\xea\xb2\x54\xbe\x7e\xad\xb8\xa6\xae\x4c\x85\x6c\xf3\x33\x5f\x67\xf9\xc1\xde\xd9\xfb\x63\x8b\x67\x8b\xde\xc0\x84\x5e\xa9\xa2\x52\xdc\x04\xfd\x17\xb6\x57\x4a\x35\x4c\x5b\x9c\xf1\xd2\x4e\x1f\xda\xcc\x4b\x8c\x9c\x31\x3b\x8e\x9f\xc3\xa8\x6d\x0c\x00\x77\xbc\x47\x05\xb0\x61\x54\x03\x4f\x69\x8e\x87\x3f\x78\x43\x33\xcc\x9a\x86\x7a\x7b\xd0\x8f\x6e\x48\x73\x3c\xae\x5a\xe4\x91\x9a\xe6\xce\xf4\x97\xec\xaa\x1e\x2d\x07\x71\x9e\xde\x75\xa2\x2a\x85\xb3\xa7\xe3\x79\x76\x7e\x34\xc3\x48\xe2\xf9\x1e\x28\x66\x1d\x2a\x42\x91\xa7\x16\xa3\x14\x8a\xe3\x9e\x73\x4a\x1c\x5e\x03\x6e\xed\xbf\xf9\xed\x5d\xd9\x1b\xfd\x49\xc2\xbb\xdb\x05\xe1\x94\x5b\x97\x50\x1e\x78\x1b\xf6\x98\x49\x73\x43\x89\x26\x4a\x14\x2d\xfd\x5f\x3c\x40\xbe\x0b\x19\x38\xf1\x9c\xec\xa3\xfa\x9a\xaf\x3d\xfe\x05\x00\x00\xff\xff\x5d\x16\x95\x07\x86\x02\x00\x00"),
		},
		"/innerloop/pvc": &vfsgen۰CompressedFileInfo{
			name:             "pvc",
			modTime:          time.Date(2018, 10, 4, 9, 16, 23, 850123135, time.UTC),
			uncompressedSize: 250,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xbd\x8a\xc3\x30\x10\x84\x7b\x3d\xc5\xbe\xc0\x19\xae\x55\xeb\xfa\x8e\x03\x83\xfb\x3d\x79\x08\x22\xfa\x8b\x76\x1d\x08\x46\xef\x1e\xe4\x98\x10\x70\xb9\x33\xdf\xec\x0c\x17\x3f\xa3\x8a\xcf\xc9\xd2\xfd\xdb\x5c\x7d\x5a\x2c\xfd\x75\x45\x14\x49\xe7\x1c\xd6\x88\x31\xb0\x8f\x26\x42\x79\x61\x65\x6b\x88\x12\x47\x58\xda\xb6\x61\x2a\x70\xc3\xa4\xb9\xf2\x05\xc3\x2f\x47\xb4\x66\x88\x02\xff\x23\x48\x07\x89\xb8\x94\x9d\x7c\x9b\x1f\xe9\x43\x93\x02\xd7\x61\x76\x0e\x22\x3f\x79\xc1\x9e\xfd\x3a\x15\x74\x6b\xff\x51\x21\x79\xad\x0e\x47\x47\xc5\x6d\x85\xe8\x71\x11\xc9\x8b\x3f\x2f\x1c\xb9\xb0\xf3\xfa\x68\xcd\x3c\x03\x00\x00\xff\xff\x76\xbd\xed\x76\xfa\x00\x00\x00"),
		},
		"/innerloop/route": &vfsgen۰CompressedFileInfo{
			name:             "route",
			modTime:          time.Date(2018, 8, 14, 17, 14, 16, 0, time.UTC),
			uncompressedSize: 172,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x31\x0e\xc2\x30\x0c\x85\xe1\x3d\xa7\xf0\x09\x82\x58\x73\x08\x06\x90\xd8\x4d\xfb\x10\x16\x4d\x6c\x25\xa6\x4b\xd5\xbb\xa3\x28\x13\xa2\xf3\xff\x3e\x3d\x36\xb9\xa3\x36\xd1\x92\xa8\xea\xc7\x11\xd5\x50\xda\x4b\x9e\x1e\x45\x4f\xeb\x39\xbc\xa5\xcc\x89\xae\xbd\x85\x0c\xe7\x99\x9d\x53\x20\x2a\x9c\x91\x68\xdb\xe2\x85\x33\xf6\x3d\x10\x2d\xfc\xc0\xd2\x7a\x23\x62\xb3\xdf\xf8\x0f\x9a\x61\xea\x63\xd7\x41\xc6\xd1\x0d\x75\x95\x09\x47\xe2\x1b\x00\x00\xff\xff\xdd\xc7\x7e\xf9\xac\x00\x00\x00"),
		},
		"/innerloop/service": &vfsgen۰CompressedFileInfo{
			name:             "service",
			modTime:          time.Date(2018, 10, 4, 7, 33, 27, 665611911, time.UTC),
			uncompressedSize: 257,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\x8a\xc3\x30\x10\x45\x7b\x9d\x62\x2e\xb0\x86\x6d\xd5\x6e\xbf\x18\xbc\x6c\x3f\x91\x7f\x8c\x88\xa4\x19\xa4\xc1\x10\x8c\xef\x1e\x2c\x52\x24\x24\xe9\x86\x79\xef\xc1\x67\x8d\xff\xa8\x2d\x4a\xf1\xb4\x7e\xbb\x4b\x2c\xb3\xa7\x09\x75\x8d\x01\x2e\xc3\x78\x66\x63\xef\x88\x0a\x67\x78\xda\xb6\xe1\x97\x33\xf6\xdd\x11\x25\x3e\x21\xb5\x83\x11\xb1\xea\x33\x7c\x0d\x9a\x22\x1c\xb2\x4a\xb5\x5e\x7d\xf5\xb3\x2b\x93\x22\x0c\xa3\x54\xbb\xb7\x5a\xc5\x24\x48\xf2\xf4\xf7\x33\xf6\x8f\x71\x5d\x60\xe3\xfb\xa0\x21\x21\x98\xd4\x8f\x5b\x66\x68\x92\x6b\x46\xb1\x20\xe5\x1c\x97\x07\x7e\x0b\x00\x00\xff\xff\x7c\x58\xa5\x67\x01\x01\x00\x00"),
		},
		"/servicecatalog": &vfsgen۰DirInfo{
			name:    "servicecatalog",
			modTime: time.Date(2018, 11, 19, 8, 35, 54, 754265971, time.UTC),
		},
		"/servicecatalog/servicebinding": &vfsgen۰CompressedFileInfo{
			name:             "servicebinding",
			modTime:          time.Date(2018, 10, 11, 9, 25, 12, 782687771, time.UTC),
			uncompressedSize: 273,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x43\x67\x15\xd9\x0a\x01\x1d\xda\x03\x64\xa8\x81\xee\x8c\xfc\x6b\x10\xb1\x69\xc1\x14\xb2\x08\xbc\x7b\x21\xb7\xa9\x9b\x51\xff\xe9\xf1\x93\xad\x3d\x29\x2f\x78\x2b\x85\xd2\x2b\xc5\x33\x2f\x20\xf7\xd0\x1a\x6d\xac\x13\x28\x0e\x05\x39\x0e\xd8\x6e\x92\x61\xe4\xce\x45\x3e\xb1\x99\xac\x9a\xc8\x7e\xe2\xcc\x95\xe7\x75\x8a\xd7\x17\x8b\xb2\x3e\xdf\x4e\x17\x54\x3e\x85\xab\xe8\x98\xe8\x57\x7d\x17\x1d\x45\xa7\xb0\xa0\xf2\xc8\x95\x53\x20\xea\xc5\x89\x5a\xdb\x5b\xdd\x03\xd1\xcc\x17\xcc\xd6\x19\x11\x97\xd2\xe1\x7d\xbd\x9d\x1f\xce\xbf\xd8\x0a\x72\x57\x44\xad\xb2\x66\x7c\xe0\x2b\x3d\xfc\x3d\xe6\x1b\xf2\x86\x7a\xbe\xe7\xc3\xdf\x73\x3f\x19\x3a\xba\x7f\x07\x00\x00\xff\xff\x85\x6f\x46\xd9\x11\x01\x00\x00"),
		},
		"/servicecatalog/serviceinstance": &vfsgen۰CompressedFileInfo{
			name:             "serviceinstance",
			modTime:          time.Date(2018, 11, 19, 8, 35, 54, 753585081, time.UTC),
			uncompressedSize: 333,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xbd\x6a\x04\x21\x14\x85\x7b\x9f\xe2\x16\xa9\x0d\xdb\x05\x21\x45\x08\x29\x92\x62\x09\x0c\xa4\x3f\xeb\x5c\x16\x59\xe7\x8e\x78\xcd\x12\x10\xdf\x3d\xe8\xee\xe4\x87\x2d\xfd\xce\x39\x7e\x62\xad\x77\x82\x85\x9f\x52\x22\xf7\x48\x76\x8f\x85\xa9\x35\x53\x2b\x65\xc8\x91\xc9\x4e\x89\xbd\x9d\x38\x9f\x83\x67\xa5\xd6\x90\xc2\x07\x67\x0d\xab\x38\xd2\x0b\xf6\x28\x88\xeb\xd1\x9e\x1e\xd4\x86\xf5\xfe\xbc\x3b\x70\xc1\xce\x9c\x82\xcc\x8e\xae\xd3\x57\xd1\x02\xf1\x6c\x16\x2e\x98\x51\xe0\x0c\x51\x37\x3b\xaa\x75\x68\x5b\x33\x44\x11\x07\x8e\xda\x33\x22\xa4\xd4\xc3\xed\x7d\x23\xff\xdd\xfc\xc1\x9a\xd8\xf7\x89\x8f\x9f\x5a\x38\x5f\x8d\xcf\x11\xaa\x2f\x5f\x85\xb3\x20\xee\x37\xd3\xa0\xe3\xaa\xff\xed\xf7\x08\xb9\x29\x77\x38\xba\x09\x19\x0b\x17\xce\x7a\xe1\x3f\xc7\xb7\x69\x95\xf1\x5d\x2c\x73\x6b\xdf\x01\x00\x00\xff\xff\xdd\xed\x80\x29\x4d\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/innerloop"].(os.FileInfo),
		fs["/servicecatalog"].(os.FileInfo),
	}
	fs["/innerloop"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/innerloop/deploymentconfig"].(os.FileInfo),
		fs["/innerloop/imagestream"].(os.FileInfo),
		fs["/innerloop/pvc"].(os.FileInfo),
		fs["/innerloop/route"].(os.FileInfo),
		fs["/innerloop/service"].(os.FileInfo),
	}
	fs["/servicecatalog"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/servicecatalog/servicebinding"].(os.FileInfo),
		fs["/servicecatalog/serviceinstance"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
