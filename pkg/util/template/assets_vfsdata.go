// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 10, 11, 9, 22, 1, 958566131, time.UTC),
		},
		"/innerloop": &vfsgen۰DirInfo{
			name:    "innerloop",
			modTime: time.Date(2018, 10, 25, 10, 19, 7, 400743052, time.UTC),
		},
		"/innerloop/deploymentconfig": &vfsgen۰CompressedFileInfo{
			name:             "deploymentconfig",
			modTime:          time.Date(2018, 10, 25, 10, 19, 7, 400110771, time.UTC),
			uncompressedSize: 1969,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x4f\x6f\xdb\x3a\x0c\xbf\xe7\x53\x08\xbd\x3b\x46\x7b\x54\x4f\x0f\xe9\x7b\xc0\x3b\xb4\x08\x96\xa2\x77\x46\x66\x1c\x6e\xfa\x07\x8a\xf6\x10\x04\xfd\xee\x83\xe2\xd4\x91\xf3\x67\xc5\x06\x6c\x3a\x99\xa4\x48\xfe\xc8\x1f\x45\x43\xa4\x37\xe4\x44\xc1\x6b\x05\x31\xa6\x79\x88\xe8\xd3\x96\x36\x32\xa7\x50\xf7\xf7\xb3\x6f\xe4\x1b\xad\x9e\x30\xda\xb0\x73\xe8\x65\x11\xfc\x86\xda\x99\x43\x81\x06\x04\xf4\x4c\x29\x0b\x6b\xb4\x29\x7f\xa9\x1c\x43\xab\xfd\x7e\xfe\x02\x0e\xdf\xdf\x67\x4a\x79\x70\x58\x6a\x52\x44\x93\xaf\x32\x46\x4b\x06\x92\x56\xf7\x33\xa5\x12\x5a\x34\x12\xf8\x46\x10\xa5\x9a\x11\x80\x39\x00\x98\xda\x93\x30\x08\xb6\xbb\xc1\x5d\x76\x11\xb5\xfa\x12\xac\x25\xdf\xce\x94\x12\x74\xd1\x82\xe0\x60\x2d\x91\xe7\x53\xa2\xbf\x91\xfc\x73\x00\xf9\x9c\x57\x9a\x75\x1f\xd5\xe6\x63\x82\x17\x20\x8f\x3c\x26\xab\x14\x70\x5b\xa4\xae\x54\x65\x0a\xa1\xee\x81\x6b\x4b\xeb\x3a\x75\x11\xb9\xa7\x14\xb8\xa9\x73\xf6\x42\x31\xcf\xf2\xe8\x63\x82\x73\xe0\x1b\xfd\x59\x90\x35\xf9\x52\x1e\xaf\xa3\xef\x4f\xbe\xfb\xbd\x62\xf0\x2d\xaa\xf9\x2a\xa2\x99\xff\xeb\xfb\xa4\x8a\x86\x54\x57\x0b\x1e\x4e\x0f\xb6\x1b\x4c\x6f\xf9\xab\xb0\xed\xf7\xe8\x9b\x42\x26\x07\x2d\x6a\x75\xd7\x60\x5f\x71\xe7\x85\x1c\xea\xcc\x55\x92\xbb\xe9\x9d\x65\x67\xed\x32\x58\x32\x3b\xad\xfe\xb1\xdf\x61\x97\x46\xfb\x2d\x1c\x31\xb0\x4c\xba\x3b\x32\xb0\x0c\x2c\x07\x8f\x43\x65\x59\x9a\xc0\x8f\x1c\x24\x98\x60\xb5\x7a\x5d\x2c\x47\x7d\x1f\x6c\xe7\xf0\x39\x74\x7e\x1a\xd5\x65\xcd\x12\x64\xab\xaf\x36\xbb\x88\x3b\x00\x4d\x5b\x60\x6c\xaa\x3c\x83\x37\xa2\x88\x8b\x35\xb0\xd0\x06\x8c\xa4\x0b\x7f\xf7\x50\xfa\x92\xa7\xfc\x26\x2f\x26\x6b\x42\xe5\x07\x57\x8b\xe7\xa7\xd5\x25\x4d\xdc\xf9\xea\x2b\xf4\xa0\xeb\x2e\x71\x6d\x83\x01\x5b\xa7\x07\xaa\xb9\xf3\x8f\x26\xb8\x48\x16\xaf\xda\x21\x25\x74\x6b\x8b\x8f\xeb\x8e\x6c\xa3\xeb\xd3\x13\x49\xf5\x41\x05\x31\x5e\x10\xfd\xd1\xf4\xd5\xa9\x43\x03\x6d\xbf\x49\xbb\x09\x71\x57\x5d\x6b\x37\x63\x0a\x1d\x1b\x4c\x5a\xed\x4f\xe4\x0a\xb2\x23\x0f\x42\xc1\x3f\x63\x4a\x39\xc3\xd0\xf3\x06\xfb\xba\x30\x56\x36\xb4\x3f\x73\x3a\x42\xfa\x8f\x2c\xfe\x85\x01\x19\x22\x97\xec\xba\x28\xbb\x27\xe2\x49\x6d\xb7\xbc\xab\xab\x83\xa3\x54\xcc\x8b\x3f\x09\x7a\x79\x3b\xc4\x5f\x58\x20\xa7\x0b\x38\x26\x2b\x5e\xce\x7c\x85\xa9\x6d\x8f\xa3\x56\x1d\x77\xed\xff\x99\xaa\xc5\x36\x6f\x8b\xd9\x48\xdd\x20\x2f\x81\xc1\x8d\xc8\xa1\x93\xe0\x40\xc8\x68\x25\xdc\xe1\xf9\x66\xcc\xb9\x8a\x2a\x6f\x70\xbb\xe1\x50\xc0\x1c\x7e\x50\x07\x04\x2b\x61\x04\xf7\x0a\xed\x27\x33\x72\x1c\xb5\x3f\x5f\xc0\xf9\x4e\xfa\x65\xe4\x97\x6b\xf1\x47\x00\x00\x00\xff\xff\x72\xed\x96\x09\xb1\x07\x00\x00"),
		},
		"/innerloop/imagestream": &vfsgen۰CompressedFileInfo{
			name:             "imagestream",
			modTime:          time.Date(2018, 10, 8, 10, 12, 58, 129088114, time.UTC),
			uncompressedSize: 620,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\xeb\xdb\x30\x0c\xc5\xef\xf9\x14\xe2\xcf\xae\x4d\xf8\xef\xe8\xb2\x43\xd9\x2e\x83\x31\xc6\x0a\xbb\xab\x8e\xd2\x79\xb5\x2d\x61\x39\x85\x62\xf2\xdd\x47\x1d\x37\xed\x60\x27\xdb\x3f\xe9\x49\xcf\xaf\x94\x0f\x11\x03\x1d\x44\xc0\x7c\x82\xfe\x3b\x06\x82\x65\x41\x71\xbf\x28\xa9\xe3\x68\xe0\xfa\xde\x5d\x5c\x1c\x0d\x7c\x73\x9a\x3b\x97\x29\xa8\xe9\x4a\x81\x84\xf1\x4c\xd0\x1f\x85\x6c\xff\x35\xe0\x99\x14\x96\xa5\xdb\xc1\xab\xd6\xdd\x79\xcf\x42\x51\x7f\xbb\x29\xf7\x8e\x87\xeb\x7b\x07\xb0\x0e\xac\xaa\x63\x4e\x84\xa1\x03\x08\x94\x71\xc4\x8c\xa6\x03\x00\xf0\x78\x22\xaf\xeb\x1d\x00\x45\x0c\x3c\xad\x2e\x4b\xe5\xf7\xd7\x1d\x57\xd7\x95\xa9\x90\x6d\x7a\xe6\xcb\x2c\x3f\xd8\x3b\x7b\x7b\x4c\xf1\x6c\xd1\x1b\x98\xd0\x2b\x55\x54\x8a\x9b\xa0\xff\xc2\xf6\x42\xa9\x9a\x69\x83\x33\x9e\xdb\xea\x5d\xeb\x39\xc4\xc8\x19\xb3\xe3\xf8\x39\x8c\xda\xda\x00\x70\xc3\x9b\x55\x00\x1b\x46\x35\xf0\x96\xe6\xb8\xfb\x83\x57\x34\xc3\xac\x69\xa8\xbb\x07\xfd\xe8\x86\x34\xc7\xbd\xe5\x20\xce\xd3\x7f\xeb\xa8\x4a\xe1\xe4\x69\x7f\x9a\x9d\x1f\xcd\x30\x92\x78\xbe\x05\x8a\x59\x87\x8a\x50\xe4\xad\x2d\x2b\x85\xe2\xb8\xb9\x99\x12\x87\xa7\x8d\x35\xe3\x97\xcf\x6d\x95\x2d\xb7\x9f\x24\xbc\xa9\x5d\x10\x4e\xb9\x25\x06\xe5\x81\xd7\x66\x8f\x99\x34\x37\x94\x68\xa2\x44\xd1\xd2\xbf\xf1\x02\xe4\x9b\x90\x81\x23\xcf\xc9\x3e\x02\xae\xfe\xda\xf1\x37\x00\x00\xff\xff\xec\x98\x21\x83\x6c\x02\x00\x00"),
		},
		"/innerloop/pvc": &vfsgen۰CompressedFileInfo{
			name:             "pvc",
			modTime:          time.Date(2018, 10, 4, 9, 16, 23, 850123135, time.UTC),
			uncompressedSize: 250,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xbd\x8a\xc3\x30\x10\x84\x7b\x3d\xc5\xbe\xc0\x19\xae\x55\xeb\xfa\x8e\x03\x83\xfb\x3d\x79\x08\x22\xfa\x8b\x76\x1d\x08\x46\xef\x1e\xe4\x98\x10\x70\xb9\x33\xdf\xec\x0c\x17\x3f\xa3\x8a\xcf\xc9\xd2\xfd\xdb\x5c\x7d\x5a\x2c\xfd\x75\x45\x14\x49\xe7\x1c\xd6\x88\x31\xb0\x8f\x26\x42\x79\x61\x65\x6b\x88\x12\x47\x58\xda\xb6\x61\x2a\x70\xc3\xa4\xb9\xf2\x05\xc3\x2f\x47\xb4\x66\x88\x02\xff\x23\x48\x07\x89\xb8\x94\x9d\x7c\x9b\x1f\xe9\x43\x93\x02\xd7\x61\x76\x0e\x22\x3f\x79\xc1\x9e\xfd\x3a\x15\x74\x6b\xff\x51\x21\x79\xad\x0e\x47\x47\xc5\x6d\x85\xe8\x71\x11\xc9\x8b\x3f\x2f\x1c\xb9\xb0\xf3\xfa\x68\xcd\x3c\x03\x00\x00\xff\xff\x76\xbd\xed\x76\xfa\x00\x00\x00"),
		},
		"/innerloop/route": &vfsgen۰CompressedFileInfo{
			name:             "route",
			modTime:          time.Date(2018, 8, 14, 17, 14, 16, 0, time.UTC),
			uncompressedSize: 172,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x31\x0e\xc2\x30\x0c\x85\xe1\x3d\xa7\xf0\x09\x82\x58\x73\x08\x06\x90\xd8\x4d\xfb\x10\x16\x4d\x6c\x25\xa6\x4b\xd5\xbb\xa3\x28\x13\xa2\xf3\xff\x3e\x3d\x36\xb9\xa3\x36\xd1\x92\xa8\xea\xc7\x11\xd5\x50\xda\x4b\x9e\x1e\x45\x4f\xeb\x39\xbc\xa5\xcc\x89\xae\xbd\x85\x0c\xe7\x99\x9d\x53\x20\x2a\x9c\x91\x68\xdb\xe2\x85\x33\xf6\x3d\x10\x2d\xfc\xc0\xd2\x7a\x23\x62\xb3\xdf\xf8\x0f\x9a\x61\xea\x63\xd7\x41\xc6\xd1\x0d\x75\x95\x09\x47\xe2\x1b\x00\x00\xff\xff\xdd\xc7\x7e\xf9\xac\x00\x00\x00"),
		},
		"/innerloop/service": &vfsgen۰CompressedFileInfo{
			name:             "service",
			modTime:          time.Date(2018, 10, 4, 7, 33, 27, 665611911, time.UTC),
			uncompressedSize: 257,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\x8a\xc3\x30\x10\x45\x7b\x9d\x62\x2e\xb0\x86\x6d\xd5\x6e\xbf\x18\xbc\x6c\x3f\x91\x7f\x8c\x88\xa4\x19\xa4\xc1\x10\x8c\xef\x1e\x2c\x52\x24\x24\xe9\x86\x79\xef\xc1\x67\x8d\xff\xa8\x2d\x4a\xf1\xb4\x7e\xbb\x4b\x2c\xb3\xa7\x09\x75\x8d\x01\x2e\xc3\x78\x66\x63\xef\x88\x0a\x67\x78\xda\xb6\xe1\x97\x33\xf6\xdd\x11\x25\x3e\x21\xb5\x83\x11\xb1\xea\x33\x7c\x0d\x9a\x22\x1c\xb2\x4a\xb5\x5e\x7d\xf5\xb3\x2b\x93\x22\x0c\xa3\x54\xbb\xb7\x5a\xc5\x24\x48\xf2\xf4\xf7\x33\xf6\x8f\x71\x5d\x60\xe3\xfb\xa0\x21\x21\x98\xd4\x8f\x5b\x66\x68\x92\x6b\x46\xb1\x20\xe5\x1c\x97\x07\x7e\x0b\x00\x00\xff\xff\x7c\x58\xa5\x67\x01\x01\x00\x00"),
		},
		"/servicecatalog": &vfsgen۰DirInfo{
			name:    "servicecatalog",
			modTime: time.Date(2018, 10, 11, 9, 25, 12, 784142577, time.UTC),
		},
		"/servicecatalog/servicebinding": &vfsgen۰CompressedFileInfo{
			name:             "servicebinding",
			modTime:          time.Date(2018, 10, 11, 9, 25, 12, 782687771, time.UTC),
			uncompressedSize: 273,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x43\x67\x15\xd9\x0a\x01\x1d\xda\x03\x64\xa8\x81\xee\x8c\xfc\x6b\x10\xb1\x69\xc1\x14\xb2\x08\xbc\x7b\x21\xb7\xa9\x9b\x51\xff\xe9\xf1\x93\xad\x3d\x29\x2f\x78\x2b\x85\xd2\x2b\xc5\x33\x2f\x20\xf7\xd0\x1a\x6d\xac\x13\x28\x0e\x05\x39\x0e\xd8\x6e\x92\x61\xe4\xce\x45\x3e\xb1\x99\xac\x9a\xc8\x7e\xe2\xcc\x95\xe7\x75\x8a\xd7\x17\x8b\xb2\x3e\xdf\x4e\x17\x54\x3e\x85\xab\xe8\x98\xe8\x57\x7d\x17\x1d\x45\xa7\xb0\xa0\xf2\xc8\x95\x53\x20\xea\xc5\x89\x5a\xdb\x5b\xdd\x03\xd1\xcc\x17\xcc\xd6\x19\x11\x97\xd2\xe1\x7d\xbd\x9d\x1f\xce\xbf\xd8\x0a\x72\x57\x44\xad\xb2\x66\x7c\xe0\x2b\x3d\xfc\x3d\xe6\x1b\xf2\x86\x7a\xbe\xe7\xc3\xdf\x73\x3f\x19\x3a\xba\x7f\x07\x00\x00\xff\xff\x85\x6f\x46\xd9\x11\x01\x00\x00"),
		},
		"/servicecatalog/serviceinstance": &vfsgen۰CompressedFileInfo{
			name:             "serviceinstance",
			modTime:          time.Date(2018, 10, 11, 8, 47, 22, 758236171, time.UTC),
			uncompressedSize: 333,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xbd\x6a\x04\x21\x14\x85\x7b\x9f\xe2\x16\xa9\x0d\xdb\x05\x21\x45\x08\x29\x92\x62\x09\x0c\xa4\x3f\xeb\x5c\x16\x59\xe7\x8e\x78\xcd\x12\x10\xdf\x3d\xe8\xee\xe4\x87\x2d\xfd\xce\x39\x7e\x62\xad\x77\x82\x85\x9f\x52\x22\xf7\x48\x76\x8f\x85\xa9\x35\x53\x2b\x65\xc8\x91\xc9\x4e\x89\xbd\x9d\x38\x9f\x83\x67\xa5\xd6\x90\xc2\x07\x67\x0d\xab\x38\xd2\x0b\xf6\x28\x88\xeb\xd1\x9e\x1e\xd4\x86\xf5\xfe\xbc\x3b\x70\xc1\xce\x9c\x82\xcc\x8e\xae\xd3\x57\xd1\x02\xf1\x6c\x16\x2e\x98\x51\xe0\x0c\x51\x37\x3b\xaa\x75\x68\x5b\x33\x44\x11\x07\x8e\xda\x33\x22\xa4\xd4\xc3\xed\x7d\x23\xff\xdd\xfc\xc1\x9a\xd8\xf7\x89\x8f\x9f\x5a\x38\x5f\x8d\xcf\x11\xaa\x2f\x5f\x85\xb3\x20\xee\x37\xd3\xa0\xe3\xaa\xff\xed\xf7\x08\xb9\x29\x77\x38\xba\x09\x19\x0b\x17\xce\x7a\xe1\x3f\xc7\xb7\x69\x95\xf1\x5d\x2c\x73\x6b\xdf\x01\x00\x00\xff\xff\xdd\xed\x80\x29\x4d\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/innerloop"].(os.FileInfo),
		fs["/servicecatalog"].(os.FileInfo),
	}
	fs["/innerloop"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/innerloop/deploymentconfig"].(os.FileInfo),
		fs["/innerloop/imagestream"].(os.FileInfo),
		fs["/innerloop/pvc"].(os.FileInfo),
		fs["/innerloop/route"].(os.FileInfo),
		fs["/innerloop/service"].(os.FileInfo),
	}
	fs["/servicecatalog"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/servicecatalog/servicebinding"].(os.FileInfo),
		fs["/servicecatalog/serviceinstance"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
