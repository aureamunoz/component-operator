// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 29, 18, 15, 37, 81325585, time.UTC),
		},
		"/innerloop": &vfsgen۰DirInfo{
			name:    "innerloop",
			modTime: time.Date(2019, 1, 29, 17, 50, 43, 763890747, time.UTC),
		},
		"/innerloop/deployment": &vfsgen۰CompressedFileInfo{
			name:             "deployment",
			modTime:          time.Date(2019, 1, 29, 17, 50, 43, 763324649, time.UTC),
			uncompressedSize: 1730,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\xc1\x4e\xdc\x30\x10\xbd\xe7\x2b\x7c\xe0\xd8\xc4\x82\xa3\x51\x0f\xd5\xd2\x9e\x58\xba\x12\x15\xf7\x89\x33\x2c\x06\xdb\xe3\xda\x4e\x68\x14\xe5\xdf\x2b\x27\x90\x3a\xb0\xb0\xa8\xaa\xea\x53\x66\xc6\xef\xf9\xbd\x99\xd1\x2e\x38\x75\x83\x3e\x28\xb2\x82\x81\x73\x81\x77\xa7\xc5\x83\xb2\x8d\x60\x17\xe8\x34\xf5\x06\x6d\x2c\x0c\x46\x68\x20\x82\x28\x18\xd3\x50\xa3\x0e\xe9\x8b\x25\x80\x60\xc3\x50\x5d\x81\xc1\x71\x1c\x06\xe6\xc1\xee\x91\x9d\x3c\x60\xff\x89\x9d\x74\xa0\x5b\x64\xe2\x33\xab\xbe\xd7\xf7\x28\xe3\x16\x23\x54\x97\x13\x9c\x8d\xe3\x44\x30\x0c\xd3\x65\x36\x8e\x62\xfa\x9e\x21\x13\x15\xda\x66\xbe\x65\xc1\x60\xf6\x4a\x11\x1c\xca\xf4\xbc\x47\xa7\x95\x84\x20\xd8\x69\xc1\x58\x40\x8d\x32\x92\x9f\x85\x19\x88\xf2\xee\x32\x53\xfa\x52\x6b\xc1\x58\x44\xe3\x34\x44\x7c\x42\x64\x16\xd3\xd1\x2b\xf0\x3f\xb0\xfa\x51\xbb\xe9\xbc\xb4\x9c\x72\xcf\xb6\xd3\x91\x64\x23\x28\x8b\x7e\x11\x58\x32\xf0\xfb\x4c\x6e\xc9\x4a\x99\x05\xbc\x03\xcf\xb5\xaa\x79\x68\x1d\xfa\x4e\x05\xf2\x0d\x97\x64\x6f\xb3\x44\x95\xe2\x05\x23\xc9\x18\xb0\x8d\x38\x46\x52\x2b\x9b\xc7\xcb\x75\xb4\x9d\xc8\x7d\xcf\xed\xaa\xae\x1d\xca\xea\xab\xed\x56\x6d\x29\x0f\x1a\x9e\xcf\xd4\xa2\xa9\x74\x93\xbe\x56\xcd\x44\xdb\x64\xb1\x32\xb0\x47\xc1\x7e\xb6\xd0\x57\x8a\x78\xb0\xf4\xd8\x78\x72\x3c\x38\xaf\xec\xbe\xac\x89\x62\x19\xce\x94\x48\x33\x0f\x71\x0d\xdb\xb5\x5a\xef\x48\x2b\xd9\x0b\xf6\x45\x3f\x42\x1f\x96\xfa\x5b\xd2\x1c\xf9\xb8\x6a\xf8\x32\x94\x1d\xf9\x38\x21\x26\xb3\x29\x5a\x39\x72\x9e\x22\x49\xd2\x82\xfd\xd8\xec\x96\x7c\x47\xba\x35\xb8\xa5\xd6\xae\x59\x4d\xca\xec\x20\xde\x89\x83\xfd\xcf\x78\x67\xa1\xe1\x0e\x3c\x36\x65\x5a\xe5\x37\x58\xa2\x71\x1c\x7c\x54\xb7\x20\x63\x78\x85\x7f\x96\x7d\x1d\xc9\xc3\x1e\xd7\xae\x95\x55\x71\x73\x60\xf7\x56\xc3\x7e\x9e\xe6\x66\x7b\x71\xfd\x7a\x90\xbe\xb5\xe5\x3d\x74\x20\x78\x1b\x3c\xd7\x24\x41\xf3\x70\xa6\xb8\x6f\xed\x79\xaa\x59\x6a\xf0\xa9\xa6\x6a\xfc\x85\x72\xa9\x4a\x32\x4e\x69\x3c\x88\x86\x10\xd0\xd4\x1a\xcf\xeb\x56\xe9\x46\xf0\x66\xf9\xed\x0a\x7c\x4a\x81\x73\xc7\x17\xe5\x4f\x5b\xff\x6e\x49\x24\xb9\xbe\x3c\x34\x9c\x88\xde\x28\x0b\x51\x91\xdd\x62\x08\x89\x6b\x9e\x45\x83\x1d\xcf\x8a\xa5\xa6\xfd\x7b\xa0\xa7\xc7\xbf\x29\x8d\xff\x61\x71\x66\xe6\x7c\xcc\xc6\xc5\xfe\x42\x79\xc1\x86\xb1\x38\x86\x2e\x3f\xb2\x50\x8c\xb9\xf4\xe7\x13\x22\xda\x78\x33\x3d\xb7\xd1\xa0\x8c\xc8\xd4\xc9\x94\xb8\x7a\x87\xea\x77\x00\x00\x00\xff\xff\x6c\x3e\x77\x40\xc2\x06\x00\x00"),
		},
		"/innerloop/deploymentconfig": &vfsgen۰CompressedFileInfo{
			name:             "deploymentconfig",
			modTime:          time.Date(2019, 1, 29, 17, 50, 43, 760462857, time.UTC),
			uncompressedSize: 2234,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\xcd\x6e\xe3\x38\x0c\xbe\xe7\x29\x84\xa2\xc7\xb5\x8d\xee\x51\xc5\x1e\x16\xe9\x2e\x30\xc0\xa4\x13\x34\x45\xef\x8c\xcc\x38\x6a\xf5\x07\x89\xf6\x8c\x61\xe4\xdd\x07\xb2\x53\x47\x4e\x93\xb4\x05\x66\x46\x27\x93\x14\x7f\xbe\x8f\x34\x05\x4e\x3e\xa1\x0f\xd2\x1a\xce\xc0\xb9\x90\x5b\x87\x26\x6c\xe5\x86\x72\x69\x8b\xe6\x66\xf6\x22\x4d\xc9\xd9\x1d\x3a\x65\x5b\x8d\x86\xe6\xd6\x6c\x64\x35\xd3\x48\x50\x02\x01\x9f\x31\xa6\x60\x8d\x2a\xc4\x2f\x16\x63\x70\xd6\x75\xf9\x3d\x68\xdc\xed\xba\x8e\x79\x30\x15\xb2\xeb\x17\x6c\xff\x62\xd7\x0d\xa8\x1a\x19\xff\x87\xe5\xdf\xd6\xcf\x28\x68\x81\x04\xf9\xd7\xde\x9d\xed\x76\x7d\x80\xae\xeb\x2f\xb3\xdd\x8e\xf7\xdf\x83\x4b\x1f\x0a\x4d\x39\xdc\x32\xa0\x31\xc9\x32\x0b\x0e\x45\x4c\xef\xd1\x29\x29\x20\x70\x76\x33\x63\x2c\xa0\x42\x41\xd6\x9f\x2a\xac\x57\x95\x23\x28\xd1\x83\x9a\xda\x03\x79\x20\xac\xda\xc1\x9d\x5a\x87\x9c\x3d\x58\xa5\xa4\xa9\x66\x8c\x11\x6a\xa7\x80\x70\xb0\xa6\x6c\xc4\x93\x32\xf2\x4b\x58\xf9\x28\x33\xc3\xb9\x0c\x2c\x9e\x63\x06\xa3\xee\x95\xc5\x78\x84\x35\x04\xd2\xa0\x1f\x41\x64\x0c\x7c\x95\x40\xca\x58\x26\x12\xa1\x68\xc0\x17\x4a\xae\x8b\x50\x3b\xf4\x8d\x0c\xd6\x97\x45\xcc\x9e\x28\xf2\x28\x8f\x3e\xc2\x6a\x0d\xa6\xe4\xef\x05\x59\x4b\x93\xca\xe3\x75\x34\x0d\x4f\xb9\x19\x28\xcd\x57\x0e\x45\xfe\x9f\x69\x26\xd4\x65\x27\x01\x0f\xa7\xa7\xb1\x37\x3d\xc5\xaf\x09\xe1\x68\xca\x44\x96\x1a\xaa\xe1\x66\x9f\xe4\xa1\x36\x24\x35\x0e\x01\x79\x1c\x86\x40\xd3\xbb\xcb\x5a\xa9\xa5\x55\x52\xb4\x9c\xfd\xab\xbe\x43\x1b\x46\xfb\xb9\x7a\x9c\xf5\x34\x61\x79\xec\xc4\xd2\x7a\x3a\x24\x8f\xd2\x04\x86\xf3\x96\xac\xb0\x8a\xb3\xc7\xf9\x72\xd4\x37\x56\xd5\x1a\x17\xb6\x36\xd3\xa8\x3a\x6a\x96\x40\x5b\x7e\x92\xf4\x24\xee\x50\x68\xd8\x82\xc7\x32\x8b\x33\x7e\x26\x0a\x69\x57\x80\x27\xb9\x01\x41\xe1\x8d\xff\x6b\xd9\x2b\xb2\x1e\x2a\x9c\xa2\x96\x46\xc6\xb5\xf2\x66\xe0\x26\x1d\x7e\x6d\xe1\x7c\x71\xb7\x7a\xdb\x3d\x5f\x9b\xec\x19\x1a\xe0\x45\x1d\x7c\xa1\xac\x00\x55\x84\xbf\x65\xe1\x6b\x73\x1b\x6d\xc6\x96\xb8\xb7\xc9\x35\xfe\x40\x31\x5a\x85\xd5\x4e\x2a\x3c\xe9\x0d\x21\xa0\x5e\x2b\xbc\x5d\xd7\x52\x95\xbc\x38\xfc\x57\xa1\xe8\x55\xe0\xdc\xf1\x74\x5c\x8d\x50\x0f\x74\x4e\x46\xe4\xea\x93\x33\x22\xac\x6b\xb3\x53\xbd\xf1\x18\x6c\xed\x05\x06\xce\xba\xc3\x24\x10\x7a\x2d\x0d\x90\xb4\x66\x81\x21\xc4\x0c\x43\x83\x4a\x6c\x8a\xc4\x98\x29\x5b\x5d\x72\xda\x97\xf4\xbf\x54\xf8\x07\xa6\x69\x88\x9c\xf6\x5e\x3b\x6a\xef\xa4\x9f\x60\x3b\xe7\x9d\x7d\x64\xca\x18\x73\xf1\xa1\x0b\x84\x86\x9e\xfa\x74\x73\x05\x52\xf3\xa4\x3a\x11\x15\xf7\x97\x43\x91\x97\x55\xb5\x1f\xd3\x6c\xff\x2c\x7c\x89\x8d\x9c\x6f\xe3\x02\x9a\x8d\x8d\x1d\xe4\x25\x78\xd0\x23\x2e\xa8\xc9\x6a\x20\x29\x38\x23\x5f\xe3\xf1\xb2\x8d\x49\x12\x0e\xce\x74\x7e\xe3\x6d\x52\xf5\xf0\x3e\xf7\x15\xac\xc8\x23\xe8\x47\xa8\xde\x99\xa0\xc3\xae\xfa\xcd\x00\x8e\xd7\xdb\xa7\x2b\xbf\xb4\x6a\x7f\x06\x00\x00\xff\xff\x15\x05\xa1\x06\xba\x08\x00\x00"),
		},
		"/innerloop/imagestream": &vfsgen۰CompressedFileInfo{
			name:             "imagestream",
			modTime:          time.Date(2019, 1, 22, 19, 36, 18, 833418452, time.UTC),
			uncompressedSize: 756,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x8a\xdc\x30\x10\xbc\xeb\x2b\x9a\x65\x8e\x19\x9b\xcd\x51\x43\x0e\x4b\x72\x09\x6c\x1e\x64\x20\xf7\xb6\xd4\x9e\x68\x47\x2f\x24\x79\xc8\x20\xf4\xef\xc1\xb2\xac\xdd\xc0\x9e\x2c\xaa\xab\xba\xab\xca\x39\x1f\x2c\x1a\x7a\xf2\x1e\xf8\x27\x18\xbe\xa3\x21\x28\x85\xe5\x7c\xd0\x38\x91\x8e\x15\xfd\x31\xbd\x90\x48\xdf\x28\xe1\xf0\xbc\xa1\xa5\xa0\x57\xbf\x29\x44\xe5\x2c\x87\xdb\x23\xbb\x2a\x2b\x39\x3c\xab\x98\x98\x4a\x64\x22\x67\x39\x43\x40\x7b\x21\x18\xce\x9e\xc4\xf0\xd5\xe0\x85\x56\x21\x3b\xc2\x5b\xad\x5a\xf1\xc1\x79\xb2\xf1\x8f\x9a\xd3\xa0\xdc\x78\x7b\x64\x00\xdb\xc2\xaa\x3a\xa7\x40\x68\x18\x80\xa1\x84\x12\x13\x72\x06\x00\xb0\x19\xdc\xde\x00\xe8\x3d\x87\xd7\x34\xa5\xf4\xfb\x87\x2b\xdd\x3f\xc0\xe1\x86\x7a\xa1\x35\xce\x9e\xac\x94\x26\xcd\xb9\x72\xa0\x14\x5e\xdf\x1b\xb3\x6e\x20\x2b\x77\xde\xba\x78\x9d\xd7\x8e\x2a\x16\x3d\x89\x66\xc5\xb9\xeb\xe2\x7f\x3a\xad\xc4\x7d\x37\xa4\x9d\x40\xcd\x61\x46\x1d\x89\x6d\x67\xd4\x0c\xc3\x17\x27\xae\x14\x6a\xae\xb6\x38\xe1\xa5\xa5\x38\x36\xce\x93\xb5\x2e\x61\x52\xce\x7e\x36\x32\x76\x9f\xd8\xe1\x9e\x1a\x40\x18\x19\x39\x3c\x84\xc5\x1e\x5f\xf0\x86\x7c\x5c\x62\x18\xeb\xed\x31\x7e\x54\x63\x58\xec\x69\x9d\x59\x27\xa9\xcd\xd4\x44\x7f\x49\xac\xd3\x93\x70\xc6\x2b\x4d\xef\x2a\x31\x46\x32\x93\xa6\xd3\xb4\x28\x2d\xf9\x28\xc9\x6b\x77\x37\x64\x53\x1c\x2b\x84\xde\x3f\xf4\x06\xc9\xca\xee\x73\x0e\xce\xbc\x1a\xdc\x7e\xe4\x9b\xd8\x7d\xd2\x1b\xfd\x45\xde\x75\xb5\x32\xde\x85\xd4\xba\x84\xbc\xc3\x1b\x59\x63\xa2\x98\x1a\x14\x68\xa6\x40\x56\xd0\xff\xc5\x03\xa4\xbb\x27\x0e\x67\xb7\x04\xb1\x57\x5f\xfd\xb5\xcf\xbf\x00\x00\x00\xff\xff\xd3\xe2\x4c\x92\xf4\x02\x00\x00"),
		},
		"/innerloop/ingress": &vfsgen۰CompressedFileInfo{
			name:             "ingress",
			modTime:          time.Date(2019, 1, 22, 18, 8, 49, 841472170, time.UTC),
			uncompressedSize: 347,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xcd\x4e\xc3\x30\x10\x84\xef\x79\x8a\x39\xf4\x48\x53\xf5\x6a\x89\x07\x40\x82\x82\x84\xc4\x7d\xe3\x8c\xda\x90\xc4\xb1\xec\x6d\x04\xb2\xfc\xee\xc8\x0e\x20\x7e\x6e\xfb\x79\x67\x67\xc6\xe2\x87\x17\x86\x38\x2c\xce\x80\x6f\x4a\x57\xc6\x78\x58\x8f\x1d\x55\x8e\xcd\x38\xb8\xde\xe0\xce\x9d\x03\x63\x6c\x66\xaa\xf4\xa2\x62\x1a\xc0\xc9\x4c\x83\x94\xda\x93\xcc\xcc\xb9\x01\x26\xe9\x38\xc5\xb2\x03\xc4\xfb\x1f\xcb\x94\x10\xc4\x9d\x89\xdd\xc8\xf7\x1b\xec\x56\x99\xae\x84\xb9\x45\xfb\xd8\xbd\xd2\xea\x03\x55\xda\xfb\x7a\x8e\x6a\x05\xa4\x54\xc5\xc8\xd9\xd4\x79\x3b\xa9\x56\x74\x7d\x51\x45\x4f\x5b\xc2\xc2\x75\x62\x4d\xdd\xe3\xb2\x44\xfd\xdd\x09\xb8\xa8\xfa\xad\x13\xe0\x45\x2f\xf1\x0b\xf6\x15\x0d\x0e\x9f\x0c\x74\x62\x47\xba\xde\x7c\x3f\x00\x91\x61\x1d\x2c\x4f\xff\x3e\xfb\x47\xf0\xb4\x84\x2d\xf9\xd9\xd3\xb6\x85\x72\xfe\x08\x00\x00\xff\xff\x62\x6c\xa9\xf9\x5b\x01\x00\x00"),
		},
		"/innerloop/pvc": &vfsgen۰CompressedFileInfo{
			name:             "pvc",
			modTime:          time.Date(2019, 1, 22, 18, 8, 49, 837678910, time.UTC),
			uncompressedSize: 339,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x3d\x6b\x33\x31\x10\x84\xfb\xfb\x15\x53\xb8\x7c\xdf\x83\xb4\x82\x54\x6e\xe3\x24\x60\x70\xbf\xd6\x0d\x46\xb1\xbe\x22\xe9\x0c\x46\xe8\xbf\x07\xc9\x26\x31\xb8\x93\x76\x9f\x19\x9e\x95\x68\x0e\x4c\xd9\x04\xaf\x70\x79\x99\xce\xc6\x2f\x0a\x9f\x7d\x92\x0b\x7d\x39\x04\xbb\x3a\x6e\xad\x18\x37\x39\x16\x59\xa4\x88\x9a\x00\x2f\x8e\x0a\xb5\xce\xfb\x48\x3d\xef\x4b\x48\x72\xe2\xfc\x2e\x8e\xad\x4d\x80\x95\x23\x6d\xee\x20\x20\x31\x0e\xf2\x77\xf9\x90\x7e\x98\xd5\x8a\x24\xfe\x44\x6c\xce\xbc\xfe\xc3\xe6\x22\x76\x25\xd4\x2b\xe6\x8f\xe3\x17\x75\xd9\xb1\xc8\xfc\x36\x7a\xf1\x17\xe9\x30\x5a\x53\xe3\x7d\x8b\xb4\x56\x2b\xe8\x97\x4e\xe5\x48\xdd\x2d\x44\x6b\xe6\xbc\x0b\x0b\x87\xd4\xff\x27\xf3\xbe\x1a\xad\x89\x39\xac\x49\xf3\x2e\x9f\xf8\xbd\x32\x97\xfb\x0f\xc8\x37\xfe\xf9\xf4\xad\x44\xd1\xa6\x5c\x5b\x9b\x7e\x02\x00\x00\xff\xff\x94\x0f\x3d\x3d\x53\x01\x00\x00"),
		},
		"/innerloop/route": &vfsgen۰CompressedFileInfo{
			name:             "route",
			modTime:          time.Date(2019, 1, 22, 18, 8, 49, 833044163, time.UTC),
			uncompressedSize: 261,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcd\x6a\xc4\x20\x18\x45\xf7\x3e\xc5\x5d\x64\x59\x2c\xdd\x0a\x7d\x83\xfe\x40\x0b\xdd\x7f\x49\x6e\x5b\x27\x89\x8a\x9a\xc0\x20\xbe\xfb\x60\xb2\x18\x06\xb2\x13\xce\x3d\x72\x3e\x09\xf6\x87\x31\x59\xef\x0c\xa2\x5f\x33\xb5\x0f\x74\xe9\xdf\xfe\x66\x6d\xfd\xf3\xf6\xa2\x26\xeb\x46\x83\xaf\xc6\xd4\xc2\x2c\xa3\x64\x31\x0a\x70\xb2\xd0\xa0\x14\xfd\x21\x0b\x6b\x55\xc0\x2c\x3d\xe7\xd4\x18\x20\x21\x3c\xc2\x33\x01\x28\x05\x51\xdc\x1f\xd1\x4d\xbc\x3e\xa1\xdb\x64\x5e\x09\xf3\x0a\xfd\xd9\x5f\x38\xe4\x77\x66\xd1\x6f\xfb\xbf\xb8\x2b\x6d\x8c\x5a\xcd\xfe\x3e\x94\x5a\x4b\x01\xdd\xd8\x56\x29\x70\x68\x15\xd9\x1f\x2d\xc7\x05\xdf\x8c\x9b\x1d\x78\x96\x72\x0b\x00\x00\xff\xff\x3f\x79\xef\x1f\x05\x01\x00\x00"),
		},
		"/innerloop/service": &vfsgen۰CompressedFileInfo{
			name:             "service",
			modTime:          time.Date(2019, 1, 22, 18, 8, 49, 839553123, time.UTC),
			uncompressedSize: 314,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbd\x6a\xc4\x30\x10\x84\x7b\x3f\xc5\x14\x57\x26\x86\xb4\x82\x54\x69\xf3\x63\xb8\x90\x7e\x4f\x1e\x0e\xc7\xb2\x24\xd6\x1b\x43\x10\x7a\xf7\x60\x25\x10\x0e\xdc\x0d\x9a\xf9\x46\xb3\x92\xa7\x0f\xea\x3a\xa5\xe8\xb0\x3d\x74\xf3\x14\x47\x87\x33\x75\x9b\x3c\xbb\x85\x26\xa3\x98\xb8\x0e\x88\xb2\xd0\xa1\x94\xfe\x55\x16\xd6\xda\x01\x41\x2e\x0c\xeb\xee\x01\x92\xf3\xad\x79\x04\x00\xa5\x40\x25\x5e\x89\xd3\xcc\xef\x3b\x9c\x36\x09\x5f\x84\x7b\x44\xff\x76\xf9\xa4\xb7\x17\x9a\xf4\xcf\xad\x17\xff\xc8\x1e\x46\xad\xae\xe9\x5f\xa4\xd6\x52\xc0\x38\xee\xa9\x35\xd3\xef\x2b\x72\x52\x6b\x73\xee\x9b\x6c\x7f\x9f\x33\x7d\x3f\x24\xb5\xbf\xb6\xac\xc9\x92\x4f\xc1\xe1\xfd\x69\x68\x2f\x26\x7a\xa5\x0d\xc7\xc0\xca\x40\x6f\x49\x8f\x8e\xfc\x09\x00\x00\xff\xff\xe7\xe7\x7e\xf8\x3a\x01\x00\x00"),
		},
		"/outerloop": &vfsgen۰DirInfo{
			name:    "outerloop",
			modTime: time.Date(2019, 1, 29, 21, 25, 6, 662912722, time.UTC),
		},
		"/outerloop/buildconfig": &vfsgen۰CompressedFileInfo{
			name:             "buildconfig",
			modTime:          time.Date(2019, 1, 29, 21, 25, 6, 661921490, time.UTC),
			uncompressedSize: 856,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcd\x6e\xda\x40\x10\xbe\xfb\x29\x46\x88\x53\x55\x1c\xf5\xba\x52\x0f\xe0\x38\x60\x35\xc1\x68\x6d\x52\xe5\x64\xad\xcd\x60\x36\xb1\xd7\xd6\x7a\x16\x15\x59\x7e\xf7\xca\xbb\xd0\x12\xd2\x86\x0b\xe3\x99\xef\x67\xe7\x47\xb4\xf2\x19\x75\x27\x1b\xc5\x20\x37\xb2\xda\xf9\x4d\x8b\xaa\x3b\xc8\x3d\xf9\xb2\xb9\x3b\x7e\xf3\xde\xa4\xda\x31\x58\x8c\xb5\xa0\x51\x7b\x59\x7a\x35\x92\xd8\x09\x12\xcc\x03\xa8\x44\x8e\x55\x37\x46\x00\xa2\x6d\x19\xf4\xbd\xbf\x16\x35\x0e\x43\xdf\x83\x16\xaa\x44\x98\xbe\xe1\xe9\x2b\x4c\x8f\xa2\x32\x08\xec\x3b\xf8\x71\xfe\x8a\x05\x3d\x21\x09\xff\xd1\xd2\x61\x18\xac\x40\xdf\x5b\x30\x0c\x03\xb3\xb1\xa3\x58\x29\x54\x3b\x87\x52\xa2\xc6\x2b\x17\xaf\x6b\xb1\x18\xed\x1b\x43\xad\x21\xf7\x10\x6a\xdc\x3f\x80\x7b\x7c\x54\x8b\x12\x13\xd2\x28\xea\x54\x94\xe7\xd2\x8d\x10\xab\x04\x61\x47\x1e\x40\xd7\x18\x5d\xa0\x53\x28\x25\x5d\xa4\x8c\x96\x0c\xa6\x7d\x12\x6f\x79\x10\x66\x3c\xdc\xc4\x49\x94\xc6\xfc\x25\xdb\xf2\xc7\xe1\x8c\xd1\xb8\xff\x37\x86\x87\x0f\x0e\x43\xa7\x16\x19\x2c\xa5\x35\x22\x2d\x08\xcb\x93\x73\x70\xb6\xc9\xbb\x1c\xc0\x5e\x37\xf5\x25\xfe\xb4\x9d\xab\x86\x92\x16\x0b\x9f\x1b\x45\xb2\xc6\xdb\xe6\xc6\x9f\x54\x85\xc6\x1a\x15\x89\x8a\x01\x69\x83\xe7\x3c\xaa\xe3\xc5\x6a\x76\x56\x7b\x9a\x3f\x87\xeb\x6c\xce\x97\x49\x36\xdf\x6c\xc2\xf5\xfd\x1f\x37\xbb\x1b\x06\x93\x59\x5b\x81\x3f\xb9\xa1\xcd\x79\x1a\x3d\xcc\x83\x34\xbb\x8f\xf8\x07\x86\x7f\x47\x42\x97\x48\xff\x25\x05\xf1\xe6\xc5\x7a\x7e\xa0\x7e\x99\xe1\x2f\x2c\xfc\x57\xa1\x27\x57\xd3\x4c\xec\xe4\x3c\x00\xd2\xb2\x2c\x51\xdb\x73\x9c\x8d\xbb\x3b\x98\xfc\xd2\x51\x87\x85\x46\x62\xb0\x8c\xd2\xd5\x76\x91\xfd\x0c\x17\xab\x38\xfe\x91\x25\x61\xc0\xc3\xf4\xfd\x6a\x56\x26\xb7\x02\x2e\xe1\x8e\x3e\x38\x8c\xb7\x6c\xd3\x72\x1c\xbf\xfb\x66\xd0\x5f\xaf\x35\xfa\x5b\xf9\x1d\x00\x00\xff\xff\x3c\xe9\xf8\xa8\x58\x03\x00\x00"),
		},
		"/outerloop/imagestream": &vfsgen۰FileInfo{
			name:    "imagestream",
			modTime: time.Date(2019, 1, 29, 18, 22, 58, 471884659, time.UTC),
			content: []byte("\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x49\x6d\x61\x67\x65\x53\x74\x72\x65\x61\x6d\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x7b\x7b\x2e\x4e\x61\x6d\x65\x7d\x7d"),
		},
		"/servicecatalog": &vfsgen۰DirInfo{
			name:    "servicecatalog",
			modTime: time.Date(2018, 12, 21, 14, 56, 32, 788143503, time.UTC),
		},
		"/servicecatalog/servicebinding": &vfsgen۰CompressedFileInfo{
			name:             "servicebinding",
			modTime:          time.Date(2018, 12, 21, 14, 56, 32, 788042232, time.UTC),
			uncompressedSize: 273,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x43\x67\x15\xd9\x0a\x01\x1d\xda\x03\x64\xa8\x81\xee\x8c\xfc\x6b\x10\xb1\x69\xc1\x14\xb2\x08\xbc\x7b\x21\xb7\xa9\x9b\x51\xff\xe9\xf1\x93\xad\x3d\x29\x2f\x78\x2b\x85\xd2\x2b\xc5\x33\x2f\x20\xf7\xd0\x1a\x6d\xac\x13\x28\x0e\x05\x39\x0e\xd8\x6e\x92\x61\xe4\xce\x45\x3e\xb1\x99\xac\x9a\xc8\x7e\xe2\xcc\x95\xe7\x75\x8a\xd7\x17\x8b\xb2\x3e\xdf\x4e\x17\x54\x3e\x85\xab\xe8\x98\xe8\x57\x7d\x17\x1d\x45\xa7\xb0\xa0\xf2\xc8\x95\x53\x20\xea\xc5\x89\x5a\xdb\x5b\xdd\x03\xd1\xcc\x17\xcc\xd6\x19\x11\x97\xd2\xe1\x7d\xbd\x9d\x1f\xce\xbf\xd8\x0a\x72\x57\x44\xad\xb2\x66\x7c\xe0\x2b\x3d\xfc\x3d\xe6\x1b\xf2\x86\x7a\xbe\xe7\xc3\xdf\x73\x3f\x19\x3a\xba\x7f\x07\x00\x00\xff\xff\x85\x6f\x46\xd9\x11\x01\x00\x00"),
		},
		"/servicecatalog/serviceinstance": &vfsgen۰CompressedFileInfo{
			name:             "serviceinstance",
			modTime:          time.Date(2018, 12, 21, 14, 56, 32, 788194278, time.UTC),
			uncompressedSize: 333,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xbd\x6a\x04\x21\x14\x85\x7b\x9f\xe2\x16\xa9\x0d\xdb\x05\x21\x45\x08\x29\x92\x62\x09\x0c\xa4\x3f\xeb\x5c\x16\x59\xe7\x8e\x78\xcd\x12\x10\xdf\x3d\xe8\xee\xe4\x87\x2d\xfd\xce\x39\x7e\x62\xad\x77\x82\x85\x9f\x52\x22\xf7\x48\x76\x8f\x85\xa9\x35\x53\x2b\x65\xc8\x91\xc9\x4e\x89\xbd\x9d\x38\x9f\x83\x67\xa5\xd6\x90\xc2\x07\x67\x0d\xab\x38\xd2\x0b\xf6\x28\x88\xeb\xd1\x9e\x1e\xd4\x86\xf5\xfe\xbc\x3b\x70\xc1\xce\x9c\x82\xcc\x8e\xae\xd3\x57\xd1\x02\xf1\x6c\x16\x2e\x98\x51\xe0\x0c\x51\x37\x3b\xaa\x75\x68\x5b\x33\x44\x11\x07\x8e\xda\x33\x22\xa4\xd4\xc3\xed\x7d\x23\xff\xdd\xfc\xc1\x9a\xd8\xf7\x89\x8f\x9f\x5a\x38\x5f\x8d\xcf\x11\xaa\x2f\x5f\x85\xb3\x20\xee\x37\xd3\xa0\xe3\xaa\xff\xed\xf7\x08\xb9\x29\x77\x38\xba\x09\x19\x0b\x17\xce\x7a\xe1\x3f\xc7\xb7\x69\x95\xf1\x5d\x2c\x73\x6b\xdf\x01\x00\x00\xff\xff\xdd\xed\x80\x29\x4d\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/innerloop"].(os.FileInfo),
		fs["/outerloop"].(os.FileInfo),
		fs["/servicecatalog"].(os.FileInfo),
	}
	fs["/innerloop"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/innerloop/deployment"].(os.FileInfo),
		fs["/innerloop/deploymentconfig"].(os.FileInfo),
		fs["/innerloop/imagestream"].(os.FileInfo),
		fs["/innerloop/ingress"].(os.FileInfo),
		fs["/innerloop/pvc"].(os.FileInfo),
		fs["/innerloop/route"].(os.FileInfo),
		fs["/innerloop/service"].(os.FileInfo),
	}
	fs["/outerloop"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/outerloop/buildconfig"].(os.FileInfo),
		fs["/outerloop/imagestream"].(os.FileInfo),
	}
	fs["/servicecatalog"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/servicecatalog/servicebinding"].(os.FileInfo),
		fs["/servicecatalog/serviceinstance"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
